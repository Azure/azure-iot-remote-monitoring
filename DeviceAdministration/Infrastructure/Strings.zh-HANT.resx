<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomDeviceDescription" xml:space="preserve">
    <value>實體硬體裝置。</value>
    <comment>Description of a device.</comment>
  </data>
  <data name="CustomDeviceInstructionsUrl" xml:space="preserve">
    <value>https://azure.microsoft.com/documentation/articles/iot-suite-connecting-devices/</value>
    <comment>URL pointing to a documentaiton article describing how to connect devices to IOT Suite.</comment>
  </data>
  <data name="CustomDeviceName" xml:space="preserve">
    <value>自訂裝置</value>
    <comment>Name of a device.</comment>
  </data>
  <data name="DeviceAlreadyRegisteredExceptionMessage" xml:space="preserve">
    <value>裝置 {0} 已註冊。</value>
    <comment>Error message.</comment>
  </data>
  <data name="DeviceNotRegisteredExceptionMessage" xml:space="preserve">
    <value>裝置 {0} 未註冊。</value>
    <comment>Error message.</comment>
  </data>
  <data name="DeviceRegistrationExceptionMessage" xml:space="preserve">
    <value>註冊裝置 {0} 時發生錯誤。</value>
    <comment>Error message.</comment>
  </data>
  <data name="EnabledStateNotSetError" xml:space="preserve">
    <value>必須設定 [啟用狀態]。請選取 [已啟用] 或 [已停用]。</value>
    <comment>Error message.</comment>
  </data>
  <data name="SimulatedDeviceDescription" xml:space="preserve">
    <value>用以模擬裝置的軟體。可針對任何事件及命令輕鬆延伸; 還可用 Microsoft Azure 背景工作角色執行。若要建立模擬的裝置，請遵循冷卻器範例指令。</value>
    <comment>Description of a device.</comment>
  </data>
  <data name="SimulatedDeviceName" xml:space="preserve">
    <value>模擬的裝置</value>
    <comment>Name of a device.</comment>
  </data>
  <data name="UnexpectedErrorOccurred" xml:space="preserve">
    <value>發生未預期的錯誤。</value>
    <comment>Error message.</comment>
  </data>
  <data name="UnsupportedCommandExceptionMessage" xml:space="preserve">
    <value>裝置 {0} 不支援命令 {1}。</value>
    <comment>Error message.</comment>
  </data>
  <data name="ValidationDeviceExists" xml:space="preserve">
    <value>裝置已經存在於裝置登錄中</value>
    <comment>Error message.</comment>
  </data>
  <data name="ValidationDeviceIdMissing" xml:space="preserve">
    <value>DeviceID 不得為空白或 null</value>
    <comment>Error message.</comment>
  </data>
  <data name="ValidationExceptionMessage" xml:space="preserve">
    <value>裝置 {0} 發生一或多個驗證錯誤。</value>
    <comment>Error message.</comment>
  </data>
</root>